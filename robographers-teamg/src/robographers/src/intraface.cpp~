#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <sensor_msgs/Image.h>
#include <opencv/cv.h>
#include <opencv/highgui.h>
#include <cv_bridge/cv_bridge.h>

/// Object to store the new received image
cv_bridge::CvImagePtr raw_frame;

/// Has a new image arrived?
bool new_image = false;

//! Image subscriber callback
/*!
  \param msg Image pointer
  */
void imageCb(const sensor_msgs::ImageConstPtr& msg)
{
    try {
	raw_frame =
	    cv_bridge::toCvCopy(msg, sensor_msgs::Image::BGR8);
    } catch (cv_bridge::Exception& e) {
	ROS_ERROR("cv_bridge exception: %s", e.what());
	return;
    }
    new_image = true;
cv::Mat &mat=raw_frame->image;
cv::imshow("Robographer_Photo",mat);
}

int main(int argc, char **argv)
{
ros::init(argc,argv,"intraface");
ros:: NodeHandle nh;
image_transport::ImageTransport image_transport(nh);
image_transport::Subscriber image_sub =
	image_transport.subscribe("vid_frame", 1, &imageCb);
cvNamedWindow("Robographer_Photo", CV_WINDOW_AUTOSIZE);
cvStartWindowThread();
ros::spin();
}
