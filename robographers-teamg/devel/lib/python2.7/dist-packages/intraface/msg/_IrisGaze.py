# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from intraface/IrisGaze.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class IrisGaze(genpy.Message):
  _md5sum = "4d30626ef82a86d36dfcc4ba23117633"
  _type = "intraface/IrisGaze"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """### Iris and Gaze information


## Irises
#left iris positions [pixels]
float32 leftIris_x
float32 leftIris_y

#right iries position [pixels]
float32 rightIris_x
float32 rightIris_y

## Gaze
#left gaze orientation offset [pixels]
float32 leftGaze_x
float32 leftGaze_y

#right gaze orientation offset [pixels]
float32 rightGaze_x
float32 rightGaze_y

"""
  __slots__ = ['leftIris_x','leftIris_y','rightIris_x','rightIris_y','leftGaze_x','leftGaze_y','rightGaze_x','rightGaze_y']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       leftIris_x,leftIris_y,rightIris_x,rightIris_y,leftGaze_x,leftGaze_y,rightGaze_x,rightGaze_y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IrisGaze, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.leftIris_x is None:
        self.leftIris_x = 0.
      if self.leftIris_y is None:
        self.leftIris_y = 0.
      if self.rightIris_x is None:
        self.rightIris_x = 0.
      if self.rightIris_y is None:
        self.rightIris_y = 0.
      if self.leftGaze_x is None:
        self.leftGaze_x = 0.
      if self.leftGaze_y is None:
        self.leftGaze_y = 0.
      if self.rightGaze_x is None:
        self.rightGaze_x = 0.
      if self.rightGaze_y is None:
        self.rightGaze_y = 0.
    else:
      self.leftIris_x = 0.
      self.leftIris_y = 0.
      self.rightIris_x = 0.
      self.rightIris_y = 0.
      self.leftGaze_x = 0.
      self.leftGaze_y = 0.
      self.rightGaze_x = 0.
      self.rightGaze_y = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_8f.pack(_x.leftIris_x, _x.leftIris_y, _x.rightIris_x, _x.rightIris_y, _x.leftGaze_x, _x.leftGaze_y, _x.rightGaze_x, _x.rightGaze_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.leftIris_x, _x.leftIris_y, _x.rightIris_x, _x.rightIris_y, _x.leftGaze_x, _x.leftGaze_y, _x.rightGaze_x, _x.rightGaze_y,) = _struct_8f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_8f.pack(_x.leftIris_x, _x.leftIris_y, _x.rightIris_x, _x.rightIris_y, _x.leftGaze_x, _x.leftGaze_y, _x.rightGaze_x, _x.rightGaze_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.leftIris_x, _x.leftIris_y, _x.rightIris_x, _x.rightIris_y, _x.leftGaze_x, _x.leftGaze_y, _x.rightGaze_x, _x.rightGaze_y,) = _struct_8f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_8f = struct.Struct("<8f")
