// Generated by gencpp from file intraface/IrisGaze.msg
// DO NOT EDIT!


#ifndef INTRAFACE_MESSAGE_IRISGAZE_H
#define INTRAFACE_MESSAGE_IRISGAZE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace intraface
{
template <class ContainerAllocator>
struct IrisGaze_
{
  typedef IrisGaze_<ContainerAllocator> Type;

  IrisGaze_()
    : leftIris_x(0.0)
    , leftIris_y(0.0)
    , rightIris_x(0.0)
    , rightIris_y(0.0)
    , leftGaze_x(0.0)
    , leftGaze_y(0.0)
    , rightGaze_x(0.0)
    , rightGaze_y(0.0)  {
    }
  IrisGaze_(const ContainerAllocator& _alloc)
    : leftIris_x(0.0)
    , leftIris_y(0.0)
    , rightIris_x(0.0)
    , rightIris_y(0.0)
    , leftGaze_x(0.0)
    , leftGaze_y(0.0)
    , rightGaze_x(0.0)
    , rightGaze_y(0.0)  {
    }



   typedef float _leftIris_x_type;
  _leftIris_x_type leftIris_x;

   typedef float _leftIris_y_type;
  _leftIris_y_type leftIris_y;

   typedef float _rightIris_x_type;
  _rightIris_x_type rightIris_x;

   typedef float _rightIris_y_type;
  _rightIris_y_type rightIris_y;

   typedef float _leftGaze_x_type;
  _leftGaze_x_type leftGaze_x;

   typedef float _leftGaze_y_type;
  _leftGaze_y_type leftGaze_y;

   typedef float _rightGaze_x_type;
  _rightGaze_x_type rightGaze_x;

   typedef float _rightGaze_y_type;
  _rightGaze_y_type rightGaze_y;




  typedef boost::shared_ptr< ::intraface::IrisGaze_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::intraface::IrisGaze_<ContainerAllocator> const> ConstPtr;

}; // struct IrisGaze_

typedef ::intraface::IrisGaze_<std::allocator<void> > IrisGaze;

typedef boost::shared_ptr< ::intraface::IrisGaze > IrisGazePtr;
typedef boost::shared_ptr< ::intraface::IrisGaze const> IrisGazeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::intraface::IrisGaze_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::intraface::IrisGaze_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace intraface

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'intraface': ['/home/gauri/intraface_orig/src/intraface/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::intraface::IrisGaze_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::intraface::IrisGaze_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::intraface::IrisGaze_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::intraface::IrisGaze_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::intraface::IrisGaze_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::intraface::IrisGaze_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::intraface::IrisGaze_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4d30626ef82a86d36dfcc4ba23117633";
  }

  static const char* value(const ::intraface::IrisGaze_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4d30626ef82a86d3ULL;
  static const uint64_t static_value2 = 0x6dfcc4ba23117633ULL;
};

template<class ContainerAllocator>
struct DataType< ::intraface::IrisGaze_<ContainerAllocator> >
{
  static const char* value()
  {
    return "intraface/IrisGaze";
  }

  static const char* value(const ::intraface::IrisGaze_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::intraface::IrisGaze_<ContainerAllocator> >
{
  static const char* value()
  {
    return "### Iris and Gaze information\n\
\n\
\n\
## Irises\n\
#left iris positions [pixels]\n\
float32 leftIris_x\n\
float32 leftIris_y\n\
\n\
#right iries position [pixels]\n\
float32 rightIris_x\n\
float32 rightIris_y\n\
\n\
## Gaze\n\
#left gaze orientation offset [pixels]\n\
float32 leftGaze_x\n\
float32 leftGaze_y\n\
\n\
#right gaze orientation offset [pixels]\n\
float32 rightGaze_x\n\
float32 rightGaze_y\n\
";
  }

  static const char* value(const ::intraface::IrisGaze_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::intraface::IrisGaze_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.leftIris_x);
      stream.next(m.leftIris_y);
      stream.next(m.rightIris_x);
      stream.next(m.rightIris_y);
      stream.next(m.leftGaze_x);
      stream.next(m.leftGaze_y);
      stream.next(m.rightGaze_x);
      stream.next(m.rightGaze_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct IrisGaze_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::intraface::IrisGaze_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::intraface::IrisGaze_<ContainerAllocator>& v)
  {
    s << indent << "leftIris_x: ";
    Printer<float>::stream(s, indent + "  ", v.leftIris_x);
    s << indent << "leftIris_y: ";
    Printer<float>::stream(s, indent + "  ", v.leftIris_y);
    s << indent << "rightIris_x: ";
    Printer<float>::stream(s, indent + "  ", v.rightIris_x);
    s << indent << "rightIris_y: ";
    Printer<float>::stream(s, indent + "  ", v.rightIris_y);
    s << indent << "leftGaze_x: ";
    Printer<float>::stream(s, indent + "  ", v.leftGaze_x);
    s << indent << "leftGaze_y: ";
    Printer<float>::stream(s, indent + "  ", v.leftGaze_y);
    s << indent << "rightGaze_x: ";
    Printer<float>::stream(s, indent + "  ", v.rightGaze_x);
    s << indent << "rightGaze_y: ";
    Printer<float>::stream(s, indent + "  ", v.rightGaze_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTRAFACE_MESSAGE_IRISGAZE_H
